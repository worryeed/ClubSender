
from __future__ import annotations
import sys, os, time, traceback
import logging
from logging.handlers import RotatingFileHandler
from typing import List, Optional, Dict, Set
from dataclasses import dataclass
from PyQt6 import QtCore, QtWidgets
from PyQt6.QtCore import Qt, pyqtSignal, QThread, QTimer
from PyQt6.QtGui import QPalette, QColor
from PyQt6.QtWidgets import (
    QApplication, QMainWindow, QWidget, QFileDialog, QTableWidget, QTableWidgetItem, QHeaderView,
    QPushButton, QVBoxLayout, QHBoxLayout, QLabel, QLineEdit, QPlainTextEdit, QSpinBox, QCheckBox, QMessageBox,
    QDialog, QFormLayout, QDialogButtonBox, QComboBox, QGroupBox, QGridLayout, QProgressBar, QStyleFactory
)
import pandas as pd
import json
from pathlib import Path
import platform
try:
    import winreg  # for Windows theme detection
except Exception:
    winreg = None
# Optional: qdarktheme/pyqtdarktheme for consistent light/dark themes
_qdt_mod = None
_qdt_api = None  # 'setup_theme' | 'load_stylesheet' | None
try:
    import qdarktheme as _qdt_mod  # type: ignore
    _qdt_api = 'setup_theme' if hasattr(_qdt_mod, 'setup_theme') else ('load_stylesheet' if hasattr(_qdt_mod, 'load_stylesheet') else None)
except Exception:
    try:
        import pyqtdarktheme as _qdt_mod  # type: ignore
        _qdt_api = 'setup_theme' if hasattr(_qdt_mod, 'setup_theme') else ('load_stylesheet' if hasattr(_qdt_mod, 'load_stylesheet') else None)
    except Exception:
        _qdt_mod = None
        _qdt_api = None

from core import Account, JoinResult, XPokerAPI, ApiError
from core.messages import Icons, format_login_step, format_join_result, MESSAGES
from core.version import __version__
from update.manager import UpdateManager

APP_TITLE = "ClubSender"
ACCOUNTS_COLUMNS = ["–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "–ü–∞—Ä–æ–ª—å", "–ü—Ä–æ–∫—Å–∏", "ID —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞", "–¢–æ–∫–µ–Ω (–∫—Ä–∞—Ç–∫–æ)", "–ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ö–æ–¥"]
EXTRA_COLUMNS = ["–ü—Ä–æ–≥—Ä–µ—Å—Å", "–°—Ç–∞—Ç—É—Å", "–¢–µ–∫—É—â–∏–π –∫–ª—É–±"]
REPORT_COLUMNS = ["–í—Ä–µ–º—è", "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "ID –∫–ª—É–±–∞", "–£—Å–ø–µ—à–Ω–æ", "–°–æ–æ–±—â–µ–Ω–∏–µ"]

class Worker(QThread):
    log = pyqtSignal(str)
    account_updated = pyqtSignal(int, list)
    join_result = pyqtSignal(object)
    task_finished = pyqtSignal()  # –°–∏–≥–Ω–∞–ª –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏
    pause_changed = pyqtSignal(bool)  # –°–∏–≥–Ω–∞–ª –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–∞—É–∑—ã
    # username, done, total, status_text, current_club
    account_progress = pyqtSignal(str, int, int, str, str)

    def __init__(self, accounts: List[Account], parent=None):
        super().__init__(parent)
        self.accounts = accounts
        self._task = None
        self._args = ()
        self._stop = False
        self._pause = False
        self._stopped_accounts: Set[str] = set()  # –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ –∞–∫–∫–∞—É–Ω—Ç—ã
        self.jitter_ms = (400, 900)
        # –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–ª—É–±–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
        self._last_club_info = {
            'club_id': None,
            'username': None,
            'success': None,
            'message': None
        }
        # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–ª—É–±–æ–≤
        self.account_club_limits: Dict[str, int] = {}
        # –°–æ–±—ã—Ç–∏–µ –æ—Ç–º–µ–Ω—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è —Å–µ—Ç–µ–≤—ã—Ö –æ–∂–∏–¥–∞–Ω–∏–π
        import threading as _th
        self._cancel_event = _th.Event()

    def stop(self):
        self._stop = True
        try:
            # –°–∏–≥–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ–º –¥–æ–ª–≥–∏–º –æ–ø–µ—Ä–∞—Ü–∏—è–º –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            self._cancel_event.set()
        except Exception:
            pass

    def set_pause(self, value: bool):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∞—É–∑—ã –∏ –æ–ø–æ–≤–µ—Å—Ç–∏—Ç—å UI."""
        prev = self._pause
        self._pause = bool(value)
        if prev != self._pause:
            self.pause_changed.emit(self._pause)
            if self._pause:
                self.log.emit(f"{Icons.INFO} ‚è∏ –ü–∞—É–∑–∞: –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            else:
                self.log.emit(f"{Icons.INFO} ‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ: –ø—Ä–æ—Ü–µ—Å—Å –≤–æ–∑–æ–±–Ω–æ–≤–ª—ë–Ω")

    def pause_toggle(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –ø–∞—É–∑—É."""
        self.set_pause(not self._pause)

    def _wait_if_paused(self):
        """–ó–∞–¥–µ—Ä–∂–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è, –ø–æ–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–∞—É–∑–∞ (–∏–ª–∏ –¥–æ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏)."""
        while self._pause and not self._stop:
            time.sleep(0.2)

    def run(self):
        if not self._task:
            return
        try:
            self._task(*self._args)
        except Exception as e:
            self.log.emit(f"[FATAL] {e}\n{traceback.format_exc()}")

    def set_task(self, fn, *args):
        self._task = fn
        self._args = args

    def task_login_all(self):
        for idx, acc in enumerate(self.accounts):
            if self._stop: break
            try:
                proxy_info = acc.proxy or '–±–µ–∑ –ø—Ä–æ–∫—Å–∏'
                self.log.emit(f"{Icons.AUTH} [{acc.username}] –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ {proxy_info}")
                api = XPokerAPI(proxy=acc.proxy)
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º device_id –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
                if not acc.device_id:
                    import uuid
                    acc.device_id = str(uuid.uuid4())
                    self.log.emit(f"{Icons.INFO} [{acc.username}] –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω device_id: {acc.device_id[:8]}...")
                        
                data = api.login(
                    username=acc.username,
                    password=acc.password,
                    device_id=acc.device_id
                )
                token = api.token
                acc.token = token
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º refresh token –µ—Å–ª–∏ –µ—Å—Ç—å
                acc.refresh_token = api.refresh_token
                acc.access_token_expire = api.access_token_expire
                acc.refresh_token_expire = api.refresh_token_expire
                
                # Try to extract UID from login response
                uid = api.get_uid_from_login_response(data)
                if uid:
                    acc.uid = uid
                    self.log.emit(format_login_step(acc.username, "UID –ø–æ–ª—É—á–µ–Ω", True, f"uid={uid}"))
                else:
                    # If we can't get UID, try to parse from username if it's in XP format
                    if acc.username.startswith("XP"):
                        try:
                            acc.uid = int(acc.username[2:])
                            self.log.emit(format_login_step(acc.username, "UID –ø–æ–ª—É—á–µ–Ω –∏–∑ –∏–º–µ–Ω–∏", True, f"uid={acc.uid}"))
                        except:
                            self.log.emit(format_login_step(acc.username, "UID –Ω–µ –Ω–∞–π–¥–µ–Ω", False, "–Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∏–∑ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"))
                
                acc.last_login_at = time.time()
                acc.headers = api.session.headers.copy()
                self.account_updated.emit(idx, acc.as_row())
                token_status = '–ø–æ–ª—É—á–µ–Ω' if token else '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'
                self.log.emit(format_login_step(acc.username, "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞", bool(token), f"—Ç–æ–∫–µ–Ω {token_status}"))
            except ApiError as e:
                self.log.emit(format_login_step(acc.username, "–û—à–∏–±–∫–∞ API", False, str(e)))
            except Exception as e:
                self.log.emit(format_login_step(acc.username, "–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏", False, str(e)))
            time.sleep(self._rand_delay())

    def task_logout_selected(self, rows: List[int]):
        for r in rows:
            if self._stop: break
            acc = self.accounts[r]
            if not acc.token:
                self.log.emit(f"{Icons.WARNING} [{acc.username}] –í—ã—Ö–æ–¥: –Ω–µ—Ç —Ç–æ–∫–µ–Ω–∞")
                continue
            try:
                api = XPokerAPI(proxy=acc.proxy)
                api.logout(acc.token)
                acc.token = None
                self.account_updated.emit(r, acc.as_row())
                self.log.emit(f"{Icons.SUCCESS} [{acc.username}] –í—ã—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            except Exception as e:
                self.log.emit(f"{Icons.ERROR} [{acc.username}] –û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞: {e}")
            time.sleep(self._rand_delay())

    def task_join_round(self, club_ids: List[str], clubs_per_account: int, delay_min_ms: int, delay_max_ms: int, message_text: Optional[str] = None):
        self.jitter_ms = (delay_min_ms, delay_max_ms)
        processed_clubs = 0
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã
        authorized_accounts = [acc for acc in self.accounts if acc.token]
        
        if not authorized_accounts:
            self.log.emit(f"{Icons.ERROR} –ù–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏")
            self.task_finished.emit()
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
        using_individual_limits = len(self.account_club_limits) > 0
        
        if using_individual_limits:
            # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
            total_clubs_needed = sum(
                self.account_club_limits.get(acc.username.lower(), 0) 
                for acc in authorized_accounts
            )
            self.log.emit(f"{Icons.INFO} üìä –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª—É–±–æ–≤")
        else:
            # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
            if clubs_per_account == 0:
                clubs_per_account = len(club_ids)
                self.log.emit(f"{Icons.INFO} –†–µ–∂–∏–º '–≤—Å–µ –∫–ª—É–±—ã': –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ {clubs_per_account} –∫–ª—É–±–æ–≤ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç")
            
            total_clubs_needed = len(authorized_accounts) * clubs_per_account
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è: –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –∫–ª—É–±–æ–≤ –¥–ª—è –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        if len(club_ids) < total_clubs_needed:
            self.log.emit(f"{Icons.WARNING} ‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–ª—É–±–æ–≤! –¢—Ä–µ–±—É–µ—Ç—Å—è {total_clubs_needed}, –¥–æ—Å—Ç—É–ø–Ω–æ {len(club_ids)}")
            self.log.emit(f"{Icons.INFO} –ë—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª—É–±—ã")
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª—É–±–æ–≤ –ø–æ –∞–∫–∫–∞—É–Ω—Ç–∞–º
        self.log.emit(f"{Icons.INFO} üìã –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª—É–±–æ–≤:")
        self.log.emit(f"{Icons.INFO} ‚Ä¢ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {len(authorized_accounts)}")
        if using_individual_limits:
            self.log.emit(f"{Icons.INFO} ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª—É–±–æ–≤")
        else:
            self.log.emit(f"{Icons.INFO} ‚Ä¢ –ö–ª—É–±–æ–≤ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç: {clubs_per_account}")
        self.log.emit(f"{Icons.INFO} ‚Ä¢ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª—É–±–æ–≤ —Ç—Ä–µ–±—É–µ—Ç—Å—è: {total_clubs_needed}")
        self.log.emit(f"{Icons.INFO} ‚Ä¢ –í—Å–µ–≥–æ –∫–ª—É–±–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {len(club_ids)}")
        
        # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª—É–±—ã –ø–æ –∞–∫–∫–∞—É–Ω—Ç–∞–º –ø–æ—Ä—Ü–∏–æ–Ω–Ω–æ
        club_index = 0
        account_jobs = []  # [(acc, [club_ids])]
        for acc_idx, acc in enumerate(authorized_accounts):
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª—É–±–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
            if using_individual_limits:
                account_clubs_count = self.account_club_limits.get(acc.username.lower(), 0)
                if account_clubs_count == 0:
                    self.log.emit(f"{Icons.INFO} [{acc.username}] –õ–∏–º–∏—Ç –∫–ª—É–±–æ–≤ = 0, –∞–∫–∫–∞—É–Ω—Ç –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç—Å—è")
                    continue
            else:
                account_clubs_count = clubs_per_account
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –∫–ª—É–±–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
            start_idx = club_index
            end_idx = min(club_index + account_clubs_count, len(club_ids))
            if start_idx >= len(club_ids):
                self.log.emit(f"{Icons.INFO} [{acc.username}] –ö–ª—É–±—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å, –∞–∫–∫–∞—É–Ω—Ç –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç—Å—è")
                break
            account_clubs = club_ids[start_idx:end_idx]
            club_index = end_idx
            # –õ–æ–≥–∏—Ä—É–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –∫–ª—É–±–æ–≤ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞
            if len(account_clubs) > 0:
                clubs_range = f"{account_clubs[0]}-{account_clubs[-1]}" if len(account_clubs) > 1 else account_clubs[0]
                self.log.emit(f"{Icons.INFO} üë§ [{acc.username}] –Ω–∞–∑–Ω–∞—á–µ–Ω–æ {len(account_clubs)} –∫–ª—É–±–æ–≤: {clubs_range}")
            account_jobs.append((acc, account_clubs))
        
        # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ –∞–∫–∫–∞—É–Ω—Ç–∞–º: –æ–¥–Ω–æ TCP-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç
        import threading
        processed_clubs_lock = threading.Lock()
        processed_clubs_total = 0
        threads: list[threading.Thread] = []
        
        def account_worker(acc: Account, account_clubs: list[str]):
            nonlocal processed_clubs_total
            try:
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
                if not acc.uid:
                    self.log.emit(f"{Icons.ERROR} [{acc.username}] UID –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ‚Äî –ø—Ä–æ–ø—É—Å–∫ –∞–∫–∫–∞—É–Ω—Ç–∞")
                    return
                api = XPokerAPI(proxy=acc.proxy)
                api.token = acc.token
                api.refresh_token = acc.refresh_token
                # –ö–æ–ª–±—ç–∫ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏/–ø–∞—É–∑—ã
                def progress_cb(cid: int, idx: int, total: int) -> bool:
                    # –û–∂–∏–¥–∞–Ω–∏–µ –ø–∞—É–∑—ã
                    self._wait_if_paused()
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
                    if self._stop:
                        return False
                    # –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Å—Ç–∞—Ç—É—Å –Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª—É–±–∞
                    self.account_progress.emit(acc.username, idx, total, "üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞", str(cid))
                    if idx == 0:
                        self.log.emit(f"{Icons.TARGET} [{acc.username}] ‚ñ∂Ô∏è –°—Ç–∞—Ä—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ {total} –∫–ª—É–±–æ–≤ –Ω–∞ –æ–¥–Ω–æ–º TCP-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏")
                    return True
                # –ö–æ–ª–±—ç–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ –º–µ—Ä–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                def result_cb(cid: int, ok: bool, msg: str, idx: int, total: int):
                    # done = idx + 1
                    done = idx + 1
                    self.join_result.emit(JoinResult(ts=time.time(), username=acc.username, club_id=str(cid), ok=ok, message=msg))
                    result_msg = format_join_result(acc.username, str(cid), ok, msg)
                    self.log.emit(result_msg)
                    self.account_progress.emit(acc.username, done, total, ("‚úÖ –ö–ª—É–± –µ—Å—Ç—å" if ok else "‚ùå –ö–ª—É–±–∞ –Ω–µ—Ç"), str(cid))
                    nonlocal processed_clubs_total
                    with processed_clubs_lock:
                        processed_clubs_total += 1
                    # –ò–∑–±–µ–≥–∞–µ–º –ª–∏—à–Ω–µ–≥–æ –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ—Å–ª–µ –∑–∞–ø—Ä–æ—Å–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
                    if not self._stop:
                        time.sleep(self._rand_delay())
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º ID –∫–ª—É–±–æ–≤ –≤ int
                club_ids_int: list[int] = []
                for cid in account_clubs:
                    try:
                        club_ids_int.append(int(cid))
                    except Exception:
                        self.log.emit(f"{Icons.ERROR} [{acc.username}] –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –∫–ª—É–±–∞: {cid}")
                if not club_ids_int:
                    return
                any_success, results = api.join_clubs_tcp(
                    club_ids_int,
                    uid=acc.uid,
                    auth_token=acc.token,
                    keepalive=False,
                    progress_cb=progress_cb,
                    result_cb=result_cb,
                    cancel_event=self._cancel_event,
                    message_text=message_text,
                )
                # –ï—Å–ª–∏ result_cb —É–∂–µ –æ—Ç–¥–∞–ª –≤—Å–µ, –º–æ–∂–Ω–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —Ñ–∏–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å
                self.account_progress.emit(acc.username, len(results), len(club_ids_int), "üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–æ", "-")
            except Exception as e:
                self.log.emit(f"{Icons.ERROR} [{acc.username}] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞: {e}")
        
        # –°—Ç–∞—Ä—Ç—É–µ–º –ø–æ—Ç–æ–∫–∏ –ø–æ –∞–∫–∫–∞—É–Ω—Ç–∞–º
        for acc, acc_clubs in account_jobs:
            t = threading.Thread(target=account_worker, args=(acc, acc_clubs), daemon=True)
            threads.append(t)
            t.start()
        
        # –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤, –ø—Ä–∏ —ç—Ç–æ–º —É–≤–∞–∂–∞–µ–º —Å—Ç–æ–ø/–ø–∞—É–∑—É
        # –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤, —É–≤–∞–∂–∞—è –ø–∞—É–∑—É; –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –∂–¥—ë–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ–∫—É—â–∏—Ö –ø–æ–ø—ã—Ç–æ–∫
        while any(t.is_alive() for t in threads):
            self._wait_if_paused()
            # –ü—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –Ω–µ –∑–∞—Å–æ—Ä—è–µ–º –ª–æ–≥ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ ‚Äî –ø—Ä–æ—Å—Ç–æ –∂–¥—ë–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            time.sleep(0.2)
        
        # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
        if not self._stop:
            self.log.emit(f"{Icons.SUCCESS} üéØ –ü—Ä–æ—Ü–µ—Å—Å –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à—ë–Ω. –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–ª—É–±–æ–≤: {processed_clubs_total}")
        # –ü—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–∏—à–µ–º ‚Äî –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –±—ã–ª–æ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏
        self.task_finished.emit()

    def _rand_delay(self):
        import random
        a,b = self.jitter_ms
        return random.randint(a,b)/1000.0


class AccountDialog(QDialog):
    """–î–∏–∞–ª–æ–≥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞."""
    
    def __init__(self, account: Optional[Account] = None, parent=None):
        super().__init__(parent)
        self.account = account
        self.setWindowTitle("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç" if account else "–î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç")
        self.setModal(True)
        self.resize(450, 260)
        
        layout = QVBoxLayout(self)
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–æ—Ä–º—É
        form_group = QGroupBox("–î–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞")
        form_layout = QFormLayout(form_group)
        
        self.username_edit = QLineEdit()
        self.username_edit.setPlaceholderText("–ù–∞–ø—Ä–∏–º–µ—Ä: Maria122131242")
        form_layout.addRow("–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", self.username_edit)
        
        self.password_edit = QLineEdit()
        self.password_edit.setPlaceholderText("–ü–∞—Ä–æ–ª—å –∞–∫–∫–∞—É–Ω—Ç–∞")
        self.password_edit.setEchoMode(QLineEdit.EchoMode.Password)
        form_layout.addRow("–ü–∞—Ä–æ–ª—å:", self.password_edit)
        
        self.proxy_edit = QLineEdit()
        self.proxy_edit.setPlaceholderText("–ª–æ–≥–∏–Ω:–ø–∞—Ä–æ–ª—å@ip:–ø–æ—Ä—Ç –∏–ª–∏ ip:–ø–æ—Ä—Ç (—Å—Ö–µ–º–∞ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)")
        form_layout.addRow("–ü—Ä–æ–∫—Å–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ):", self.proxy_edit)
        
        layout.addWidget(form_group)
        
        # –ö–Ω–æ–ø–∫–∏
        buttons = QDialogButtonBox(
            QDialogButtonBox.StandardButton.Ok | QDialogButtonBox.StandardButton.Cancel
        )
        buttons.accepted.connect(self.accept)
        buttons.rejected.connect(self.reject)
        layout.addWidget(buttons)
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–º–∏ –µ—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º
        if account:
            self.username_edit.setText(account.username)
            self.password_edit.setText(account.password)
            # –ü—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ ‚Äî –ø–∞—Ä–æ–ª—å –º–µ–Ω—è—Ç—å –Ω–µ–ª—å–∑—è
            self.password_edit.setReadOnly(True)
            self.password_edit.setToolTip("–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–æ")
            self.proxy_edit.setText(account.proxy or "")
    
    def get_account_data(self) -> dict:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–æ—Ä–º—ã."""
        return {
            'username': self.username_edit.text().strip(),
            'password': self.password_edit.text().strip(),
            'proxy': self.proxy_edit.text().strip() or None
        }
    
    def validate(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö."""
        data = self.get_account_data()
        
        if not data['username']:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
            self.username_edit.setFocus()
            return False
            
        if not data['password']:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ü–∞—Ä–æ–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
            self.password_edit.setFocus()
            return False
            
        return True
    
    def accept(self):
        if self.validate():
            super().accept()


class ClubIdDialog(QDialog):
    """–î–∏–∞–ª–æ–≥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è ID –∫–ª—É–±–æ–≤."""
    
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setWindowTitle("–î–æ–±–∞–≤–∏—Ç—å ID –∫–ª—É–±–æ–≤")
        self.setModal(True)
        self.resize(400, 300)
        
        layout = QVBoxLayout(self)
        
        # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
        info_label = QLabel(
            "–í–≤–µ–¥–∏—Ç–µ ID –∫–ª—É–±–æ–≤ –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è:\n"
            "‚Ä¢ –ö–∞–∂–¥—ã–π ID –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ\n"
            "‚Ä¢ –ù–∞–ø—Ä–∏–º–µ—Ä: 123, 202051, 456\n"
            "‚Ä¢ –ü—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –±—É–¥—É—Ç –ø—Ä–æ–ø—É—â–µ–Ω—ã"
        )
        info_label.setStyleSheet("color: #666; font-size: 11px; margin-bottom: 10px;")
        layout.addWidget(info_label)
        
        # –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ ID –∫–ª—É–±–æ–≤
        self.clubs_edit = QPlainTextEdit()
        self.clubs_edit.setPlaceholderText(
            "123\n"
            "202051\n"
            "456\n"
            "789"
        )
        layout.addWidget(self.clubs_edit)
        
        # –ö–Ω–æ–ø–∫–∏
        buttons = QDialogButtonBox(
            QDialogButtonBox.StandardButton.Ok | QDialogButtonBox.StandardButton.Cancel
        )
        buttons.accepted.connect(self.accept)
        buttons.rejected.connect(self.reject)
        layout.addWidget(buttons)
    
    def get_club_ids(self) -> List[str]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ ID –∫–ª—É–±–æ–≤."""
        text = self.clubs_edit.toPlainText()
        club_ids = []
        
        for line in text.split('\n'):
            line = line.strip()
            if line and line.isdigit():
                club_ids.append(line)
        
        return club_ids

class DebugTCPDialog(QDialog):
    """–î–∏–∞–ª–æ–≥ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ TCP –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏."""
    
    def __init__(self, accounts: List[Account], parent=None):
        super().__init__(parent)
        self.accounts = accounts
        self.setWindowTitle("–û—Ç–ª–∞–¥–∫–∞ TCP –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
        self.setModal(True)
        self.resize(500, 400)
        
        layout = QVBoxLayout(self)
        
        # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
        info_label = QLabel(
            "üîß –û—Ç–ª–∞–¥–æ—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ TCP –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏\n\n"
            "–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω–∏—Ç –ø–æ–ª–Ω—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–æ–º–∞–Ω–¥:\n"
            "1. TCP Login\n"
            "2. Heartbeat (HBREQ)\n"
            "3. GetSelfData\n"
            "4. GetClubDescList\n"
            "5. Heartbeat\n"
            "6. GetClubDesc –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–ª—É–±–∞\n"
            "7. Heartbeat\n"
            "8. ApplyClub (–∑–∞—è–≤–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ)\n"
            "9. –§–∏–Ω–∞–ª—å–Ω—ã–π Heartbeat\n\n"
            "‚ö†Ô∏è –≠—Ç–æ –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –∫–ª—É–±!"
        )
        info_label.setStyleSheet("color: #333; font-size: 11px; margin-bottom: 10px; padding: 10px; background: #f0f0f0; border: 1px solid #ccc;")
        info_label.setWordWrap(True)
        layout.addWidget(info_label)
        
        # –í—ã–±–æ—Ä –∞–∫–∫–∞—É–Ω—Ç–∞
        account_group = QGroupBox("–í—ã–±–æ—Ä –∞–∫–∫–∞—É–Ω—Ç–∞")
        account_layout = QFormLayout(account_group)
        
        self.account_combo = QComboBox()
        authorized_accounts = [acc for acc in self.accounts if acc.token and acc.uid]
        
        if not authorized_accounts:
            self.account_combo.addItem("–ù–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ —Å UID")
            self.account_combo.setEnabled(False)
        else:
            for acc in authorized_accounts:
                uid_text = f" (uid={acc.uid})" if acc.uid else ""
                proxy_text = f" via {acc.proxy}" if acc.proxy else ""
                self.account_combo.addItem(f"{acc.username}{uid_text}{proxy_text}", acc)
                
        account_layout.addRow("–ê–∫–∫–∞—É–Ω—Ç:", self.account_combo)
        layout.addWidget(account_group)
        
        # ID –∫–ª—É–±–∞
        club_group = QGroupBox("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        club_layout = QFormLayout(club_group)
        
        self.club_id_edit = QLineEdit()
        self.club_id_edit.setPlaceholderText("–ù–∞–ø—Ä–∏–º–µ—Ä: 123456")
        self.club_id_edit.setText("123456")  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —Ç–µ—Å—Ç–æ–≤
        club_layout.addRow("ID –∫–ª—É–±–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", self.club_id_edit)
        
        self.version_edit = QLineEdit()
        self.version_edit.setText("1.12.67")
        self.version_edit.setPlaceholderText("–í–µ—Ä—Å–∏—è –∫–ª–∏–µ–Ω—Ç–∞")
        club_layout.addRow("–í–µ—Ä—Å–∏—è –∫–ª–∏–µ–Ω—Ç–∞:", self.version_edit)
        
        layout.addWidget(club_group)
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—É–¥—É—Ç –ø–æ–∫–∞–∑–∞–Ω—ã –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –æ–∫–Ω–µ
        result_label = QLabel(
            "üìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç–ª–∞–¥–∫–∏ –±—É–¥—É—Ç –ø–æ–∫–∞–∑–∞–Ω—ã –≤ –∂—É—Ä–Ω–∞–ª–µ —Å–æ–±—ã—Ç–∏–π –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ–∫–Ω–∞.\n"
            "–í—ã —É–≤–∏–¥–∏—Ç–µ –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∫–∞–∂–¥–æ–º—É —à–∞–≥—É."
        )
        result_label.setStyleSheet("color: #666; font-size: 10px; font-style: italic; margin-top: 10px;")
        result_label.setWordWrap(True)
        layout.addWidget(result_label)
        
        # –ö–Ω–æ–ø–∫–∏
        buttons = QDialogButtonBox(
            QDialogButtonBox.StandardButton.Ok | QDialogButtonBox.StandardButton.Cancel
        )
        buttons.button(QDialogButtonBox.StandardButton.Ok).setText("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ—Ç–ª–∞–¥–∫—É")
        buttons.button(QDialogButtonBox.StandardButton.Cancel).setText("–û—Ç–º–µ–Ω–∞")
        buttons.accepted.connect(self.accept)
        buttons.rejected.connect(self.reject)
        layout.addWidget(buttons)
        
    def get_debug_params(self) -> Optional[dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏."""
        if self.account_combo.currentData() is None:
            return None
            
        club_id_text = self.club_id_edit.text().strip()
        if not club_id_text or not club_id_text.isdigit():
            return None
            
        return {
            'account': self.account_combo.currentData(),
            'club_id': int(club_id_text),
            'version': self.version_edit.text().strip() or "1.12.67"
        }
    
    def validate(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö."""
        if self.account_combo.currentData() is None:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏!")
            return False
            
        club_id_text = self.club_id_edit.text().strip()
        if not club_id_text:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ ID –∫–ª—É–±–∞!")
            self.club_id_edit.setFocus()
            return False
            
        if not club_id_text.isdigit():
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "ID –∫–ª—É–±–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!")
            self.club_id_edit.setFocus()
            return False
            
        return True
    
    def accept(self):
        if self.validate():
            super().accept()

class UpdateDownloadThread(QThread):
    progress = pyqtSignal(int)
    finished = pyqtSignal(bool, str)

    def __init__(self, mgr: UpdateManager, parent=None):
        super().__init__(parent)
        self.mgr = mgr

    def run(self):
        ok = self.mgr.download(progress_cb=lambda p: self.progress.emit(int(p)))
        if ok:
            installed = self.mgr.install()
            self.finished.emit(bool(installed), "")
        else:
            self.finished.emit(False, "download_failed")


class MainWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle(APP_TITLE)
        self.resize(1200, 760)

        self.accounts: List[Account] = []
        self.club_ids: List[str] = []
        self.report_rows: List[dict] = []

        root = QWidget()
        self.setCentralWidget(root)
        v = QVBoxLayout(root)

        # üî∏ –°–ï–ö–¶–ò–Ø –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ê–ö–ö–ê–£–ù–¢–ê–ú–ò
        accounts_group = QGroupBox("üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏")
        accounts_layout = QHBoxLayout(accounts_group)
        
        self.btn_add_account = QPushButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç")
        self.btn_edit_account = QPushButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å")
        self.btn_delete_account = QPushButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å")
        self.btn_load_accounts = QPushButton("üìÅ –ò–∑ Excel —Ñ–∞–π–ª–∞")
        self.btn_save_accounts = QPushButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        
        accounts_layout.addWidget(self.btn_add_account)
        accounts_layout.addWidget(self.btn_edit_account)
        accounts_layout.addWidget(self.btn_delete_account)
        accounts_layout.addWidget(self.btn_load_accounts)
        accounts_layout.addWidget(self.btn_save_accounts)
        accounts_layout.addStretch()
        v.addWidget(accounts_group)
        
        # üî∏ –°–ï–ö–¶–ò–Ø –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ö–õ–£–ë–ê–ú–ò
        clubs_group = QGroupBox("üèõÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª—É–±–∞–º–∏")
        clubs_layout = QHBoxLayout(clubs_group)
        
        self.btn_add_clubs = QPushButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–ª—É–±—ã")
        self.btn_clear_clubs = QPushButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫")
        self.btn_load_clubs = QPushButton("üìÅ –ò–∑ Excel —Ñ–∞–π–ª–∞")
        self.btn_load_club_distribution = QPushButton("üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª—É–±–æ–≤")
        self.clubs_count_label = QLabel("–ö–ª—É–±–æ–≤: 0")
        
        clubs_layout.addWidget(self.btn_add_clubs)
        clubs_layout.addWidget(self.btn_clear_clubs)
        clubs_layout.addWidget(self.btn_load_clubs)
        clubs_layout.addWidget(self.btn_load_club_distribution)
        clubs_layout.addWidget(self.clubs_count_label)
        clubs_layout.addStretch()
        v.addWidget(clubs_group)
        
        # üî∏ –°–ï–ö–¶–ò–Ø –û–ü–ï–†–ê–¶–ò–ô
        operations_group = QGroupBox("üöÄ –û–ø–µ—Ä–∞—Ü–∏–∏")
        operations_layout = QHBoxLayout(operations_group)
        
        self.btn_login = QPushButton("üîê –í–æ–π—Ç–∏ –≤–æ –≤—Å–µ")
        self.btn_logout = QPushButton("üö™ –í—ã–π—Ç–∏ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö")
        self.btn_join = QPushButton("üéØ –ù–∞—á–∞—Ç—å –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ")
        self.btn_pause = QPushButton("‚è∏ –ü–∞—É–∑–∞")
        self.btn_pause.setEnabled(False)
        self.btn_stop = QPushButton("üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å")
        self.btn_export = QPushButton("üìä –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–∞")
        self.btn_check_update = QPushButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ")
        
        # –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –∫–Ω–æ–ø–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞
        self.btn_stop.setEnabled(False)
        
        operations_layout.addWidget(self.btn_login)
        operations_layout.addWidget(self.btn_logout)
        operations_layout.addWidget(self.btn_join)
        operations_layout.addWidget(self.btn_pause)
        operations_layout.addWidget(self.btn_stop)
        operations_layout.addWidget(self.btn_export)
        operations_layout.addWidget(self.btn_check_update)
        # –¢–µ–º–∞ (—Å–≤–µ—Ç–ª–∞—è/—Ç—ë–º–Ω–∞—è/—Å–∏—Å—Ç–µ–º–Ω–∞—è)
        operations_layout.addWidget(QLabel("–¢–µ–º–∞:"))
        self.cmb_theme = QComboBox()
        self.cmb_theme.addItem("–°–∏—Å—Ç–µ–º–Ω–∞—è", userData='system')
        self.cmb_theme.addItem("–°–≤–µ—Ç–ª–∞—è", userData='light')
        self.cmb_theme.addItem("–¢—ë–º–Ω–∞—è", userData='dark')
        operations_layout.addWidget(self.cmb_theme)
        operations_layout.addStretch()
        v.addWidget(operations_group)

        knobs = QHBoxLayout()
        knobs.addWidget(QLabel("–ö–ª—É–±–æ–≤ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç (0 = –≤—Å–µ –∫–ª—É–±—ã):"))
        self.spn_clubs_per_account = QSpinBox(); self.spn_clubs_per_account.setRange(0, 10000); self.spn_clubs_per_account.setValue(500)
        knobs.addWidget(self.spn_clubs_per_account)
        knobs.addWidget(QLabel("–ó–∞–¥–µ—Ä–∂–∫–∞ –º–∏–Ω (–º—Å):"))
        self.spn_delay_min = QSpinBox(); self.spn_delay_min.setRange(0, 10000); self.spn_delay_min.setValue(500)
        knobs.addWidget(self.spn_delay_min)
        knobs.addWidget(QLabel("–ó–∞–¥–µ—Ä–∂–∫–∞ –º–∞–∫—Å (–º—Å):"))
        self.spn_delay_max = QSpinBox(); self.spn_delay_max.setRange(0, 20000); self.spn_delay_max.setValue(1500)
        knobs.addWidget(self.spn_delay_max)
        self.chk_shuffle = QCheckBox("–ü–µ—Ä–µ–º–µ—à–∞—Ç—å ID –∫–ª—É–±–æ–≤")
        self.chk_shuffle.setChecked(True)
        knobs.addWidget(self.chk_shuffle)
        v.addLayout(knobs)
        
        # –ü–æ–ª–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ (–¥–æ 40 —Å–∏–º–≤–æ–ª–æ–≤)
        msg_row = QHBoxLayout()
        msg_row.addWidget(QLabel("–°–æ–æ–±—â–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ (–¥–æ 40 —Å–∏–º–≤–æ–ª–æ–≤):"))
        self.txt_message = QLineEdit()
        self.txt_message.setMaxLength(40)
        self.txt_message.setPlaceholderText("–ù–∞–ø—Ä–∏–º–µ—Ä: –ü—Ä–∏–º–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞")
        msg_row.addWidget(self.txt_message)
        v.addLayout(msg_row)
        
        # –¢–∞–±–ª–∏—Ü–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –∫–æ–ª–æ–Ω–∫–∞–º–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        base_cols = len(ACCOUNTS_COLUMNS)
        self.PROG_COL = base_cols + 0
        self.STATUS_COL = base_cols + 1
        self.CURRENT_COL = base_cols + 2
        self.tbl = QTableWidget(0, base_cols + len(EXTRA_COLUMNS))
        self.tbl.setObjectName("accountsTable")
        self.tbl.setHorizontalHeaderLabels(ACCOUNTS_COLUMNS + EXTRA_COLUMNS)
        self.tbl.horizontalHeader().setSectionResizeMode(QHeaderView.ResizeMode.Stretch)
        v.addWidget(self.tbl, stretch=1)
        
        # –§–ª–∞–≥ –ø–æ–¥–∞–≤–ª–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø—Ä–∏ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏
        self._suppress_item_changed = False
        # –†–µ–∞–∫—Ü–∏—è –Ω–∞ —Ä—É—á–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —è—á–µ–µ–∫ ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ä–∞–∑—É –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.tbl.itemChanged.connect(self.on_cell_changed)

        v.addWidget(QLabel("–ñ—É—Ä–Ω–∞–ª —Å–æ–±—ã—Ç–∏–π:"))
        self.log = QPlainTextEdit(); self.log.setReadOnly(True)
        v.addWidget(self.log, stretch=1)

        # –ü–æ–¥–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –Ω–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫
        self.btn_add_account.clicked.connect(self.on_add_account)
        self.btn_edit_account.clicked.connect(self.on_edit_account)
        self.btn_delete_account.clicked.connect(self.on_delete_account)
        self.btn_load_accounts.clicked.connect(self.on_load_accounts)
        self.btn_save_accounts.clicked.connect(self.on_save_accounts)
        
        self.btn_add_clubs.clicked.connect(self.on_add_clubs)
        self.btn_clear_clubs.clicked.connect(self.on_clear_clubs)
        self.btn_load_clubs.clicked.connect(self.on_load_clubs)
        self.btn_load_club_distribution.clicked.connect(self.on_load_club_distribution)
        
        self.btn_login.clicked.connect(self.on_login_all)
        self.btn_logout.clicked.connect(self.on_logout_selected)
        self.btn_join.clicked.connect(self.on_join)
        self.btn_pause.clicked.connect(self.on_pause)
        self.btn_stop.clicked.connect(self.on_stop)
        self.btn_export.clicked.connect(self.on_export_report)
        self.btn_check_update.clicked.connect(self.on_check_update)
        self.cmb_theme.currentIndexChanged.connect(self.on_theme_combo_changed)

        # –≠–ª–µ–º–µ–Ω—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        self._upd_thread: Optional[UpdateDownloadThread] = None
        self._upd_dialog: Optional[QDialog] = None
        
        self.worker = Worker(self.accounts)
        self.worker.log.connect(self.on_worker_log)
        self.worker.account_updated.connect(self.on_account_updated)
        self.worker.join_result.connect(self.on_join_result)
        self.worker.task_finished.connect(self.on_task_finished)
        self.worker.started.connect(self.on_worker_started)
        self.worker.finished.connect(self.on_worker_finished)
        self.worker.pause_changed.connect(self.on_worker_pause_changed)
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ –∞–∫–∫–∞—É–Ω—Ç–∞–º
        self.account_row_by_username: Dict[str, int] = {}
        self.worker.account_progress.connect(self.on_account_progress)
        
        # –ë–∞–∑–æ–≤—ã–π —Å—Ç–∏–ª—å —Å–∏—Å—Ç–µ–º—ã –¥–ª—è —Ä–µ–∂–∏–º–∞ "–°–∏—Å—Ç–µ–º–Ω–∞—è"
        try:
            app = QApplication.instance()
            self._initial_style_name = app.style().objectName()
        except Exception:
            self._initial_style_name = 'Fusion'
        # –ó–Ω–∞—á–µ–Ω–∏–µ —Ç–µ–º—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.theme_pref = 'system'      # 'system' | 'light' | 'dark'
        self.current_theme_mode = 'light'  # —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è ('light'|'dark')
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.load_settings()
        # –ê–≤—Ç–æ–ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ (–Ω–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç –∑–∞–¥–∞—á–∏)
        try:
            QtCore.QTimer.singleShot(2000, lambda: self.check_update_silent())
        except Exception:
            pass
        # –ü—Ä–∏–º–µ–Ω–∏–º —Ç–µ–∫—É—â—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É/—Å–∏—Å—Ç–µ–º–Ω—É—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.apply_theme(self.theme_pref)
        # –°—Ç–∞—Ç—É—Å-–±–∞—Ä —Å –≤–µ—Ä—Å–∏–µ–π
        try:
            self.statusBar().showMessage("")
            ver_lbl = QLabel(f"–í–µ—Ä—Å–∏—è: {__version__}")
            self.statusBar().addPermanentWidget(ver_lbl)
        except Exception:
            pass

    def on_load_accounts(self):
        path, _ = QFileDialog.getOpenFileName(self, "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª —Å –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏", "", "Excel (*.xlsx)")
        if not path:
            return
        df = pd.read_excel(path)
        
        df.columns = [str(col).lower().strip() for col in df.columns]
        
        # –¢—Ä–µ–±—É–µ–º —Ç–æ–ª—å–∫–æ username –∏ password, –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—è –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã
        need_cols = {"username", "password"}
        missing = need_cols - set(df.columns)
        if missing:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–æ–ª–æ–Ω–∫–∏: {', '.join(missing)}")
            return
        self.accounts.clear()
        self.tbl.setRowCount(0)
        for _, row in df.iterrows():
            proxy_val = row.get("proxy")
            if pd.isna(proxy_val) or str(proxy_val).strip() == "":
                proxy_val = None
            else:
                proxy_val = str(proxy_val).strip()
            
            device_id_val = row.get("device_id")
            device_id_str = str(device_id_val).strip() if device_id_val is not None and not pd.isna(device_id_val) else ""
            
            acc = Account(
                username=str(row["username"]).strip(),
                password=str(row["password"]).strip(),
                proxy=proxy_val,
                device_id=device_id_str,
            )
            # –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å device_id –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
            if not acc.device_id:
                import uuid
                acc.device_id = str(uuid.uuid4())
            self.accounts.append(acc)
            self._append_account_row(acc)
        self.worker.accounts = self.accounts
        self.save_settings()
        self.log.appendPlainText(f"{Icons.SUCCESS} –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.accounts)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤")

    def on_load_clubs(self):
        path, _ = QFileDialog.getOpenFileName(self, "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª —Å –∫–ª—É–±–∞–º–∏", "", "Excel (*.xlsx)")
        if not path: return
        df = pd.read_excel(path)
        col = None
        for c in df.columns:
            if str(c).lower() in ("club_id","id","clubid"):
                col = c; break
        if not col:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", "–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ 'club_id'")
            return
        self.club_ids = [str(x) for x in df[col].dropna().astype(str).tolist()]
        if self.chk_shuffle.isChecked():
            import random; random.shuffle(self.club_ids)
        self.update_clubs_count()
        self.save_settings()
        self.log.appendPlainText(f"{Icons.SUCCESS} –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.club_ids)} ID –∫–ª—É–±–æ–≤")

    def on_load_club_distribution(self):
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª—É–±–æ–≤ –ø–æ –∞–∫–∫–∞—É–Ω—Ç–∞–º –∏–∑ Excel —Ñ–∞–π–ª–∞."""
        if not self.accounts:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", "–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç—ã!")
            return
            
        path, _ = QFileDialog.getOpenFileName(self, "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª —Å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º –∫–ª—É–±–æ–≤", "", "Excel (*.xlsx)")
        if not path:
            return
            
        try:
            df = pd.read_excel(path)
            df.columns = [str(col).lower().strip() for col in df.columns]
            
            # –ò—â–µ–º –Ω—É–∂–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
            username_col = None
            clubs_count_col = None
            
            for c in df.columns:
                if str(c).lower() in ("username", "user", "–∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "–ª–æ–≥–∏–Ω", "–∞–∫–∫–∞—É–Ω—Ç"):
                    username_col = c
                if str(c).lower() in ("clubs_count", "clubs", "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª—É–±–æ–≤", "–∫–ª—É–±–æ–≤", "count"):
                    clubs_count_col = c
                    
            if not username_col:
                QMessageBox.critical(self, "–û—à–∏–±–∫–∞", 
                    "–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ —Å –∏–º–µ–Ω–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n"
                    "–û–∂–∏–¥–∞–µ–º—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è: username, user, –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ª–æ–≥–∏–Ω, –∞–∫–∫–∞—É–Ω—Ç")
                return
                
            if not clubs_count_col:
                QMessageBox.critical(self, "–û—à–∏–±–∫–∞", 
                    "–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∫–ª—É–±–æ–≤.\n"
                    "–û–∂–∏–¥–∞–µ–º—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è: clubs_count, clubs, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª—É–±–æ–≤, –∫–ª—É–±–æ–≤, count")
                return
            
            # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
            self.worker.account_club_limits.clear()
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
            loaded_accounts = 0
            for _, row in df.iterrows():
                username = str(row[username_col]).strip()
                try:
                    clubs_count = int(row[clubs_count_col])
                    if clubs_count < 0:
                        clubs_count = 0
                except (ValueError, TypeError):
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–æ–π –∞–∫–∫–∞—É–Ω—Ç –≤ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö
                account_exists = any(acc.username.lower() == username.lower() for acc in self.accounts)
                if account_exists:
                    self.worker.account_club_limits[username.lower()] = clubs_count
                    loaded_accounts += 1
                    
            if loaded_accounts == 0:
                QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", 
                    "–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –º–µ–∂–¥—É –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏ –≤ —Ñ–∞–π–ª–µ –∏ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º–∏ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏.\n"
                    "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∏–º–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
                return
                
            self.log.appendPlainText(f"{Icons.SUCCESS} –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–ª—è {loaded_accounts} –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–¥–∫—É —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
            total_clubs_needed = sum(self.worker.account_club_limits.values())
            self.log.appendPlainText(f"{Icons.INFO} üìä –°–≤–æ–¥–∫–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è:")
            self.log.appendPlainText(f"{Icons.INFO} ‚Ä¢ –ê–∫–∫–∞—É–Ω—Ç–æ–≤ —Å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–º –ª–∏–º–∏—Ç–æ–º: {loaded_accounts}")
            self.log.appendPlainText(f"{Icons.INFO} ‚Ä¢ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª—É–±–æ–≤ —Ç—Ä–µ–±—É–µ—Ç—Å—è: {total_clubs_needed}")
            self.log.appendPlainText(f"{Icons.INFO} ‚Ä¢ –î–æ—Å—Ç—É–ø–Ω–æ –∫–ª—É–±–æ–≤: {len(self.club_ids)}")
            
            if total_clubs_needed > len(self.club_ids):
                self.log.appendPlainText(f"{Icons.WARNING} ‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –¢—Ä–µ–±—É–µ—Ç—Å—è –±–æ–ª—å—à–µ –∫–ª—É–±–æ–≤ —á–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ")
                
        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è:\n{str(e)}")
            self.log.appendPlainText(f"{Icons.ERROR} –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è: {e}")

    def on_login_all(self):
        if not self.accounts:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", "–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç—ã")
            return
        if self.worker.isRunning():
            QMessageBox.information(self, "–ó–∞–Ω—è—Ç–æ", "–ü—Ä–æ—Ü–µ—Å—Å —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è")
            return
        self.worker.set_task(self.worker.task_login_all)
        self.worker.start()

    def on_logout_selected(self):
        rows = sorted({idx.row() for idx in self.tbl.selectedIndexes()})
        if not rows:
            QMessageBox.information(self, "–í—ã–±–æ—Ä", "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –≤—ã—Ö–æ–¥–∞")
            return
        if self.worker.isRunning():
            QMessageBox.information(self, "–ó–∞–Ω—è—Ç–æ", "–ü—Ä–æ—Ü–µ—Å—Å —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è")
            return
        self.worker.set_task(self.worker.task_logout_selected, rows)
        self.worker.start()

    def on_join(self):
        if not self.club_ids:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", "–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∫–ª—É–±—ã")
            return
        if not any(a.token for a in self.accounts):
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", "–°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç—ã (–Ω–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤)")
            return
        if self.worker.isRunning():
            QMessageBox.information(self, "–ó–∞–Ω—è—Ç–æ", "–ü—Ä–æ—Ü–µ—Å—Å —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è")
            return
        
        # –°–æ–∑–¥–∞—ë–º –∫–æ–ø–∏—é —Å–ø–∏—Å–∫–∞ –∫–ª—É–±–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        clubs_to_process = self.club_ids.copy()
        
        # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –∫–æ–ø–∏—é —Å–ø–∏—Å–∫–∞, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞ –æ–ø—Ü–∏—è
        if self.chk_shuffle.isChecked():
            import random
            random.shuffle(clubs_to_process)
            self.log.appendPlainText(f"{Icons.INFO} –°–ø–∏—Å–æ–∫ –∫–ª—É–±–æ–≤ –ø–µ—Ä–µ–º–µ—à–∞–Ω –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        
        limit = self.spn_clubs_per_account.value()
        dmin = self.spn_delay_min.value()
        dmax = self.spn_delay_max.value()
        if dmax < dmin:
            dmin, dmax = dmax, dmin
        # –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω –≤–∏–¥–∂–µ—Ç–æ–º –¥–æ 41 —Å–∏–º–≤–æ–ª–∞)
        message_text = self.txt_message.text().strip()
        self.worker.set_task(self.worker.task_join_round, clubs_to_process, limit, dmin, dmax, message_text)
        self.worker.start()

    def on_debug_tcp(self):
        """–ó–∞–ø—É—Å–∫ –æ—Ç–ª–∞–¥–∫–∏ TCP –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏."""
        if self.worker.isRunning():
            QMessageBox.information(self, "–ó–∞–Ω—è—Ç–æ", "–ü—Ä–æ—Ü–µ—Å—Å —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è")
            return
            
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        dialog = DebugTCPDialog(self.accounts, parent=self)
        if dialog.exec() != QDialog.DialogCode.Accepted:
            return
            
        debug_params = dialog.get_debug_params()
        if not debug_params:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ç–ª–∞–¥–∫–∏")
            return
            
        account = debug_params['account']
        club_id = debug_params['club_id']
        version = debug_params['version']
        
        self.log.appendPlainText(f"\n" + "="*80)
        self.log.appendPlainText(f"{Icons.INFO} üîß –ù–ê–ß–ê–õ–û –û–¢–õ–ê–î–ö–ò TCP –ü–û–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–ù–û–°–¢–ò")
        self.log.appendPlainText(f"{Icons.INFO} –ê–∫–∫–∞—É–Ω—Ç: {account.username} (uid={account.uid})")
        self.log.appendPlainText(f"{Icons.INFO} ID –∫–ª—É–±–∞: {club_id}")
        self.log.appendPlainText(f"{Icons.INFO} –í–µ—Ä—Å–∏—è –∫–ª–∏–µ–Ω—Ç–∞: {version}")
        self.log.appendPlainText(f"" + "="*80 + "\n")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç–ª–∞–¥–∫—É –≤ worker
        def task_debug_tcp_sequence():
            try:
                # –°–æ–∑–¥–∞–µ–º TCP –∫–ª–∏–µ–Ω—Ç
                from core.client import XClubTCPClient
                
                tcp_client = XClubTCPClient(proxy=account.proxy)
                tcp_client.connect()
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å  
                results = tcp_client.debug_club_join_sequence(
                    uid=account.uid,
                    token=account.token, 
                    club_id=club_id,
                    version=version
                )
                
                # –í—ã–≤–æ–¥–∏–º —Å–≤–æ–¥–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                self.worker.log.emit(f"\n" + "="*80)
                self.worker.log.emit(f"{Icons.INFO} üìä –°–í–û–î–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –û–¢–õ–ê–î–ö–ò:")
                self.worker.log.emit(f"" + "="*80)
                
                success_count = sum(1 for step in results['steps'] if step['success'])
                total_steps = len(results['steps'])
                
                self.worker.log.emit(f"{Icons.INFO} –í—ã–ø–æ–ª–Ω–µ–Ω–æ —à–∞–≥–æ–≤: {success_count}/{total_steps}")
                self.worker.log.emit(f"{Icons.INFO} –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {'‚úÖ –£–°–ü–ï–®–ù–û' if results['success'] else '‚ùå –ù–ï–£–î–ê–ß–ù–û'}")
                self.worker.log.emit(f"{Icons.INFO} –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {results['final_message']}")
                
                if results.get('club_info', {}):
                    club_info = results['club_info']
                    self.worker.log.emit(f"{Icons.INFO} –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª—É–±–µ: {club_info.get('name', 'N/A')}")
                    
                if results.get('apply_status') is not None:
                    self.worker.log.emit(f"{Icons.INFO} –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏: {results['apply_status']}")
                
                self.worker.log.emit(f"\n{Icons.INFO} üîç –î–µ—Ç–∞–ª–∏ –ø–æ —à–∞–≥–∞–º:")
                for i, step in enumerate(results['steps'], 1):
                    status = "‚úÖ" if step['success'] else "‚ùå"
                    self.worker.log.emit(f"{Icons.INFO} {i:2d}. {status} {step['name']}: {step['message']}")
                
                self.worker.log.emit(f"\n" + "="*80)
                self.worker.log.emit(f"{Icons.SUCCESS if results['success'] else Icons.ERROR} –û–¢–õ–ê–î–ö–ê TCP –ó–ê–í–ï–†–®–ï–ù–ê")
                self.worker.log.emit(f"" + "="*80 + "\n")
                
                # –°–æ–∑–¥–∞–µ–º JoinResult –¥–ª—è –æ—Ç—á–µ—Ç–∞
                join_result = JoinResult(
                    ts=time.time(),
                    username=account.username,
                    club_id=str(club_id),
                    ok=results['success'],
                    message=f"[DEBUG] {results['final_message']}"
                )
                self.worker.join_result.emit(join_result)
                
            except Exception as e:
                error_msg = f"–û—à–∏–±–∫–∞ –æ—Ç–ª–∞–¥–∫–∏ TCP: {e}"
                self.worker.log.emit(f"{Icons.ERROR} {error_msg}")
                self.worker.log.emit(f"{Icons.ERROR} Traceback: {traceback.format_exc()}")
                
                # –°–æ–∑–¥–∞–µ–º JoinResult –¥–ª—è –æ—à–∏–±–∫–∏
                join_result = JoinResult(
                    ts=time.time(),
                    username=account.username,
                    club_id=str(club_id),
                    ok=False,
                    message=f"[DEBUG ERROR] {error_msg}"
                )
                self.worker.join_result.emit(join_result)
            finally:
                try:
                    if 'tcp_client' in locals():
                        tcp_client.close()
                except:
                    pass
                self.worker.task_finished.emit()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É
        self.worker.set_task(task_debug_tcp_sequence)
        self.worker.start()

    def on_check_update(self):
        if UpdateManager is None:
            QMessageBox.information(self, "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ", "–ú–æ–¥—É–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return
        if self.worker.isRunning():
            QMessageBox.information(self, "–ó–∞–Ω—è—Ç–æ", "–°–Ω–∞—á–∞–ª–∞ –¥–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –∑–∞–¥–∞—á–∏")
            return
        try:
            mgr = UpdateManager(__version__)
            upd = mgr.check_for_update()
            if not upd:
                QMessageBox.information(self, "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ", f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–π –Ω–µ—Ç (–≤–µ—Ä—Å–∏—è {__version__})")
                return
            new_ver = getattr(upd, 'version', 'new')
            if not self._ask_yes_no("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ", f"–ù–∞–π–¥–µ–Ω–∞ –≤–µ—Ä—Å–∏—è {new_ver}. –°–∫–∞—á–∞—Ç—å?"):
                return
            self._start_update_download(mgr, str(new_ver))
        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", str(e))

    def check_update_silent(self):
        if UpdateManager is None:
            return
        try:
            mgr = UpdateManager(__version__)
            upd = mgr.check_for_update()
            if upd:
                new_ver = getattr(upd, 'version', 'new')
                if self._ask_yes_no("–î–æ—Å—Ç—É–ø–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ", f"–ù–∞–π–¥–µ–Ω–∞ –≤–µ—Ä—Å–∏—è {new_ver}. –°–∫–∞—á–∞—Ç—å —Å–µ–π—á–∞—Å?"):
                    self._start_update_download(mgr, str(new_ver))
        except Exception:
            pass

    def _start_update_download(self, mgr: UpdateManager, new_ver: str):
        # –î–∏–∞–ª–æ–≥ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞, –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç UI –ø–æ–ª–Ω–æ—Å—Ç—å—é
        dlg = QDialog(self)
        dlg.setWindowTitle(f"–ó–∞–≥—Ä—É–∑–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è {new_ver}")
        lay = QVBoxLayout(dlg)
        lbl = QLabel(f"–°–∫–∞—á–∏–≤–∞–Ω–∏–µ {new_ver}...")
        bar = QProgressBar(dlg)
        bar.setRange(0, 100); bar.setValue(0)
        lay.addWidget(lbl); lay.addWidget(bar)
        self._upd_dialog = dlg
        th = UpdateDownloadThread(mgr, self)
        self._upd_thread = th
        th.progress.connect(lambda p: (bar.setValue(int(p)), self.log.appendPlainText(f"{Icons.INFO} –ó–∞–≥—Ä—É–∑–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {int(p)}%")))
        def _done(ok: bool, err: str):
            try:
                try:
                    dlg.close()
                except Exception:
                    pass
                if ok:
                    self.log.appendPlainText(f"{Icons.SUCCESS} –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∫–∞—á–∞–Ω–æ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫...")
                    # –î–∞–¥–∏–º –∞–ø–¥–µ–π—Ç–µ—Ä—É —Å—Ç–∞—Ä—Ç–∞–Ω—É—Ç—å, –∑–∞—Ç–µ–º –∑–∞–≤–µ—Ä—à–∏–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
                    QTimer.singleShot(200, lambda: QApplication.instance().quit())
                else:
                    self.log.appendPlainText(f"{Icons.ERROR} –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ: –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏/—É—Å—Ç–∞–Ω–æ–≤–∫–∏ ({err or 'unknown'})")
                    QMessageBox.critical(self, "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ", "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏/—É—Å—Ç–∞–Ω–æ–≤–∫–∏")
            except Exception:
                logging.getLogger(__name__).exception("[update] _done callback error")
        th.finished.connect(_done)
        th.start()
        dlg.show()

    def _ask_yes_no(self, title: str, text: str) -> bool:
        box = QMessageBox(self)
        box.setWindowTitle(title)
        box.setText(text)
        yes = box.addButton("–î–∞", QMessageBox.ButtonRole.YesRole)
        no = box.addButton("–ù–µ—Ç", QMessageBox.ButtonRole.NoRole)
        box.setIcon(QMessageBox.Icon.Question)
        box.exec()
        return box.clickedButton() is yes

    def on_export_report(self):
        if not self.report_rows:
            QMessageBox.information(self, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö", "–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á–µ—Ç–∞")
            return
        
        path, _ = QFileDialog.getSaveFileName(self, "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á–µ—Ç", "", "Excel (*.xlsx)")
        if not path: 
            return
            
        try:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º JoinResult –æ–±—ä–µ–∫—Ç—ã –≤ —Å–ª–æ–≤–∞—Ä–∏
            report_data = []
            for jr in self.report_rows:
                if hasattr(jr, 'as_dict'):
                    report_data.append(jr.as_dict())
                else:
                    # –ï—Å–ª–∏ —ç—Ç–æ —É–∂–µ —Å–ª–æ–≤–∞—Ä—å
                    report_data.append(jr)
            
            # –°–æ–∑–¥–∞–µ–º DataFrame –∏–∑ —Å–ª–æ–≤–∞—Ä–µ–π (–∫–æ–ª–æ–Ω–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
            df = pd.DataFrame(report_data)
            
            # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –∫–æ–ª–æ–Ω–∫–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
            if len(df.columns) > 0:
                # –ü–µ—Ä–µ—É–ø–æ—Ä—è–¥–æ—á–∏–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ —Å–æ–≥–ª–∞—Å–Ω–æ REPORT_COLUMNS
                column_order = [col for col in REPORT_COLUMNS if col in df.columns]
                if column_order:
                    df = df[column_order]
            
            df.to_excel(path, index=False)
            self.log.appendPlainText(f"{Icons.SUCCESS} –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {path}")
            self.log.appendPlainText(f"{Icons.INFO} –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(report_data)}")
            
        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á–µ—Ç:\n{str(e)}")
            self.log.appendPlainText(f"{Icons.ERROR} –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –æ—Ç—á–µ—Ç–∞: {e}")

    def on_worker_log(self, line: str):
        self.log.appendPlainText(line)

    def on_cell_changed(self, item: QTableWidgetItem):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä—É—á–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —è—á–µ–µ–∫: —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º self.accounts –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.
        –û—Ç–∫–ª—é—á–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø–∞—Ä–æ–ª—è/—Ç–æ–∫–µ–Ω–∞/–ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ö–æ–¥–∞.
        """
        if self._suppress_item_changed:
            return
        row = item.row()
        col = item.column()
        if row < 0 or row >= len(self.accounts):
            return
        acc = self.accounts[row]
        text = item.text().strip()
        # –ö–æ–ª–æ–Ω–∫–∏: 0=–ò–º—è, 1=–ü–∞—Ä–æ–ª—å(–º–∞—Å–∫), 2=–ü—Ä–æ–∫—Å–∏, 3=DeviceID, 4=–¢–æ–∫–µ–Ω(–∫—Ä–∞—Ç–∫–æ), 5=–ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ö–æ–¥
        if col == 1 or col == 4 or col == 5:
            # –≠—Ç–∏ –∫–æ–ª–æ–Ω–∫–∏ –Ω–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã: –æ—Ç–∫–∞—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ
            self._suppress_item_changed = True
            try:
                # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –º–æ–¥–µ–ª–∏
                current = acc.as_row()[col]
                item.setText(str(current))
                # –ò —É–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Ñ–ª–∞–≥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–Ω—è—Ç
                item.setFlags(item.flags() & ~Qt.ItemFlag.ItemIsEditable)
            finally:
                self._suppress_item_changed = False
            return
        changed = False
        if col == 0:  # username
            if text and text != acc.username:
                acc.username = text
                changed = True
        elif col == 2:  # proxy
            new_proxy = text or None
            if new_proxy != (acc.proxy or None):
                acc.proxy = new_proxy
                changed = True
        elif col == 3:  # device_id
            if text != (acc.device_id or ""):
                acc.device_id = text
                changed = True
        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        if changed:
            # –ü—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –ø–æ–ª–µ–π —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–æ–∫–µ–Ω/–ø–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ö–æ–¥
            acc.token = None
            acc.last_login_at = None
            # –û–±–Ω–æ–≤–∏–º –≤–∏–∑—É–∞–ª—å–Ω–æ —Ç–æ–∫–µ–Ω/–ø–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ö–æ–¥
            self._suppress_item_changed = True
            try:
                tok_it = QTableWidgetItem("")
                tok_it.setFlags(tok_it.flags() & ~Qt.ItemFlag.ItemIsEditable)
                self.tbl.setItem(row, 4, tok_it)
                last_it = QTableWidgetItem("")
                last_it.setFlags(last_it.flags() & ~Qt.ItemFlag.ItemIsEditable)
                self.tbl.setItem(row, 5, last_it)
            finally:
                self._suppress_item_changed = False
            # –ü–µ—Ä–µ—Å—Ç—Ä–æ–∏–º –∏–Ω–¥–µ–∫—Å –ø–æ –∏–º–µ–Ω–∏
            self.account_row_by_username = {a.username.lower(): i for i, a in enumerate(self.accounts)}
            # –ü—Ä–æ–∫–∏–Ω–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤ worker –∏ —Å–æ—Ö—Ä–∞–Ω–∏–º JSON
            self.worker.accounts = self.accounts
            self.save_settings()

    def on_account_progress(self, username: str, done: int, total: int, status_text: str, current_club: str):
        row = self.account_row_by_username.get(username.lower())
        if row is None:
            return
        # –ü—Ä–æ–≥—Ä–µ—Å—Å–±–∞—Ä
        w = self.tbl.cellWidget(row, self.PROG_COL)
        if isinstance(w, QProgressBar):
            w.setRange(0, max(total, 1))
            w.setValue(max(0, min(done, total)))
            percent = (0 if total == 0 else int((done/total)*100))
            w.setFormat(f"{done}/{total} ({percent}%)")
        # –°—Ç–∞—Ç—É—Å –∏ —Ç–µ–∫—É—â–∏–π –∫–ª—É–± (—Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è)
        it_status = QTableWidgetItem(status_text)
        it_status.setFlags(it_status.flags() & ~Qt.ItemFlag.ItemIsEditable)
        self.tbl.setItem(row, self.STATUS_COL, it_status)
        it_curr = QTableWidgetItem(current_club)
        it_curr.setFlags(it_curr.flags() & ~Qt.ItemFlag.ItemIsEditable)
        self.tbl.setItem(row, self.CURRENT_COL, it_curr)

    def on_account_updated(self, row: int, data: list):
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –∏–∑ –±—ç–∫—ç–Ω–¥–∞ ‚Äî –±–µ–∑ —Ç—Ä–∏–≥–≥–µ—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        self._suppress_item_changed = True
        try:
            for col, val in enumerate(data):
                it = QTableWidgetItem(str(val))
                # –ó–∞–ø—Ä–µ—â–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è/—Ç–æ–∫–µ–Ω–∞/–ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ö–æ–¥–∞
                if col in (1, 4, 5):
                    it.setFlags(it.flags() & ~Qt.ItemFlag.ItemIsEditable)
                self.tbl.setItem(row, col, it)
            # –î–æ–ø. –∫–æ–ª–æ–Ω–∫–∏ —Å—Ç–∞—Ç—É—Å–∞/—Ç–µ–∫—É—â–µ–≥–æ –∫–ª—É–±–∞ —Ç–æ–∂–µ —Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è
            it_status = self.tbl.item(row, self.STATUS_COL)
            if it_status:
                it_status.setFlags(it_status.flags() & ~Qt.ItemFlag.ItemIsEditable)
            it_curr = self.tbl.item(row, self.CURRENT_COL)
            if it_curr:
                it_curr.setFlags(it_curr.flags() & ~Qt.ItemFlag.ItemIsEditable)
        finally:
            self._suppress_item_changed = False

    def on_join_result(self, jr: JoinResult):
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä–µ–∫—Ç JoinResult –Ω–∞–ø—Ä—è–º—É—é, –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —Å–ª–æ–≤–∞—Ä—å –¥–µ–ª–∞–µ–º –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ
        self.report_rows.append(jr)

    def _append_account_row(self, acc: Account):
        r = self.tbl.rowCount()
        self.tbl.insertRow(r)
        data = acc.as_row()
        self._suppress_item_changed = True
        try:
            for c, v in enumerate(data):
                it = QTableWidgetItem(str(v))
                # –î–µ–ª–∞–µ—Ç –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–æ–ª–æ–Ω–∫–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è
                if c in (1, 4, 5):  # –ü–∞—Ä–æ–ª—å(–º–∞—Å–∫–∏—Ä.), –¢–æ–∫–µ–Ω(–∫—Ä–∞—Ç–∫–æ), –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ö–æ–¥
                    it.setFlags(it.flags() & ~Qt.ItemFlag.ItemIsEditable)
                self.tbl.setItem(r, c, it)
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫: –ø—Ä–æ–≥—Ä–µ—Å—Å, —Å—Ç–∞—Ç—É—Å, —Ç–µ–∫—É—â–∏–π –∫–ª—É–±
            prog = QProgressBar()
            prog.setRange(0, 1)
            prog.setValue(0)
            prog.setTextVisible(True)
            prog.setFormat("0/0 (0%)")
            self.tbl.setCellWidget(r, self.PROG_COL, prog)
            st_it = QTableWidgetItem("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ")
            st_it.setFlags(st_it.flags() & ~Qt.ItemFlag.ItemIsEditable)
            self.tbl.setItem(r, self.STATUS_COL, st_it)
            cur_it = QTableWidgetItem("-")
            cur_it.setFlags(cur_it.flags() & ~Qt.ItemFlag.ItemIsEditable)
            self.tbl.setItem(r, self.CURRENT_COL, cur_it)
        finally:
            self._suppress_item_changed = False
        # –ò–Ω–¥–µ–∫—Å –ø–æ –∏–º–µ–Ω–∏
        self.account_row_by_username[acc.username.lower()] = r
        prog.setRange(0, 1)
        prog.setValue(0)
        prog.setTextVisible(True)
        prog.setFormat("0/0 (0%)")
        self.tbl.setCellWidget(r, self.PROG_COL, prog)
        self.tbl.setItem(r, self.STATUS_COL, QTableWidgetItem("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ"))
        self.tbl.setItem(r, self.CURRENT_COL, QTableWidgetItem("-"))
        # –ò–Ω–¥–µ–∫—Å –ø–æ –∏–º–µ–Ω–∏
        self.account_row_by_username[acc.username.lower()] = r
    
    def on_add_account(self):
        """–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç."""
        dialog = AccountDialog(parent=self)
        if dialog.exec() == QDialog.DialogCode.Accepted:
            data = dialog.get_account_data()
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º device_id —Å—Ä–∞–∑—É
            import uuid
            acc = Account(
                username=data['username'],
                password=data['password'],
                device_id=str(uuid.uuid4()),
                proxy=data['proxy']
            )
            self.accounts.append(acc)
            self._append_account_row(acc)
            self.worker.accounts = self.accounts
            self.save_settings()
            self.log.appendPlainText(f"{Icons.SUCCESS} –î–æ–±–∞–≤–ª–µ–Ω –∞–∫–∫–∞—É–Ω—Ç: {acc.username}")
    
    def on_edit_account(self):
        """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç."""
        rows = sorted({idx.row() for idx in self.tbl.selectedIndexes()})
        if not rows:
            QMessageBox.information(self, "–í—ã–±–æ—Ä", "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–æ–∫—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return
        if len(rows) > 1:
            QMessageBox.information(self, "–í—ã–±–æ—Ä", "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return
        
        row = rows[0]
        if row >= len(self.accounts):
            return
            
        acc = self.accounts[row]
        dialog = AccountDialog(account=acc, parent=self)
        if dialog.exec() == QDialog.DialogCode.Accepted:
            data = dialog.get_account_data()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞
            acc.username = data['username']
            acc.password = data['password']
            acc.proxy = data['proxy']
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–æ–∫–µ–Ω –∏ –¥–∞—Ç—É –≤—Ö–æ–¥–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
            acc.token = None
            acc.last_login_at = None
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –≤ —Ç–∞–±–ª–∏—Ü–µ
            acc_data = acc.as_row()
            for col, val in enumerate(acc_data):
                self.tbl.setItem(row, col, QTableWidgetItem(str(val)))
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –ø–æ –∏–º–µ–Ω–∏
            self.account_row_by_username[acc.username.lower()] = row
            
            self.worker.accounts = self.accounts
            self.save_settings()
            self.log.appendPlainText(f"{Icons.SUCCESS} –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω –∞–∫–∫–∞—É–Ω—Ç: {acc.username}")
    
    def on_delete_account(self):
        """–£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã."""
        rows = sorted({idx.row() for idx in self.tbl.selectedIndexes()}, reverse=True)
        if not rows:
            QMessageBox.information(self, "–í—ã–±–æ—Ä", "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return
        
        reply = QMessageBox.question(
            self, "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", 
            f"–£–¥–∞–ª–∏—Ç—å {len(rows)} –∞–∫–∫–∞—É–Ω—Ç(–æ–≤)?",
            QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No
        )
        
        if reply == QMessageBox.StandardButton.Yes:
            deleted_usernames = []
            for row in rows:
                if row < len(self.accounts):
                    deleted_usernames.append(self.accounts[row].username)
                    del self.accounts[row]
                    self.tbl.removeRow(row)
            
            self.worker.accounts = self.accounts
            self.save_settings()
            if deleted_usernames:
                self.log.appendPlainText(f"{Icons.SUCCESS} –£–¥–∞–ª–µ–Ω—ã –∞–∫–∫–∞—É–Ω—Ç—ã: {', '.join(deleted_usernames)}")
    
    def on_save_accounts(self):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç—ã –≤ —Ñ–∞–π–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
        try:
            self.save_settings()
            QMessageBox.information(self, "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
            self.log.appendPlainText(f"{Icons.SUCCESS} –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {e}")
            self.log.appendPlainText(f"{Icons.ERROR} –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
    
    def on_add_clubs(self):
        """–î–æ–±–∞–≤–∏—Ç—å ID –∫–ª—É–±–æ–≤ –≤—Ä—É—á–Ω—É—é."""
        dialog = ClubIdDialog(parent=self)
        if dialog.exec() == QDialog.DialogCode.Accepted:
            new_club_ids = dialog.get_club_ids()
            if new_club_ids:
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ ID –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º (–∏–∑–±–µ–≥–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç–æ–≤)
                existing = set(self.club_ids)
                added = []
                for club_id in new_club_ids:
                    if club_id not in existing:
                        self.club_ids.append(club_id)
                        existing.add(club_id)
                        added.append(club_id)
                
                # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞ –æ–ø—Ü–∏—è
                if self.chk_shuffle.isChecked() and self.club_ids:
                    import random
                    random.shuffle(self.club_ids)
                    self.log.appendPlainText(f"{Icons.INFO} –°–ø–∏—Å–æ–∫ –∫–ª—É–±–æ–≤ –ø–µ—Ä–µ–º–µ—à–∞–Ω")
                
                self.update_clubs_count()
                self.save_settings()
                if added:
                    self.log.appendPlainText(f"{Icons.SUCCESS} –î–æ–±–∞–≤–ª–µ–Ω–æ {len(added)} –Ω–æ–≤—ã—Ö –∫–ª—É–±–æ–≤: {', '.join(added)}")
                else:
                    self.log.appendPlainText(f"{Icons.INFO} –í—Å–µ –≤–≤–µ–¥—ë–Ω–Ω—ã–µ –∫–ª—É–±—ã —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ")
            else:
                QMessageBox.information(self, "–î–∞–Ω–Ω—ã–µ", "–ù–µ –≤–≤–µ–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ ID –∫–ª—É–±–∞")
    
    def on_clear_clubs(self):
        """–û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–ª—É–±–æ–≤."""
        if self.club_ids:
            reply = QMessageBox.question(
                self, "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", 
                f"–û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∏–∑ {len(self.club_ids)} –∫–ª—É–±–æ–≤?",
                QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No
            )
            
            if reply == QMessageBox.StandardButton.Yes:
                self.club_ids.clear()
                self.update_clubs_count()
                self.save_settings()
                self.log.appendPlainText(f"{Icons.SUCCESS} –°–ø–∏—Å–æ–∫ –∫–ª—É–±–æ–≤ –æ—á–∏—â–µ–Ω")
        else:
            QMessageBox.information(self, "–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç", "–°–ø–∏—Å–æ–∫ –∫–ª—É–±–æ–≤ —É–∂–µ –ø—É—Å—Ç")
    
    def update_clubs_count(self):
        """–û–±–Ω–æ–≤–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–ª—É–±–æ–≤."""
        self.clubs_count_label.setText(f"–ö–ª—É–±–æ–≤: {len(self.club_ids)}")
    
    def save_settings(self):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ JSON —Ñ–∞–π–ª."""
        settings = {
            'accounts': [{
                'username': acc.username,
                'password': acc.password,
                'device_id': acc.device_id,
                'proxy': acc.proxy,
                'refresh_token': acc.refresh_token,
                'access_token_expire': acc.access_token_expire,
                'refresh_token_expire': acc.refresh_token_expire,
            } for acc in self.accounts],
            'club_ids': self.club_ids,
'settings': {
                'clubs_per_account': self.spn_clubs_per_account.value(),
                'delay_min_ms': self.spn_delay_min.value(),
                'delay_max_ms': self.spn_delay_max.value(),
                'shuffle_clubs': self.chk_shuffle.isChecked(),
                'apply_message': self.txt_message.text(),
                'theme': getattr(self, 'theme_pref', 'system'),
            }
        }
        try:
            settings_path = Path("files")/"xpoker_settings.json"
            with open(settings_path, 'w', encoding='utf-8') as f:
                json.dump(settings, f, indent=2, ensure_ascii=False)
        except Exception as e:
            self.log.appendPlainText(f"{Icons.ERROR} –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")

    def on_pause(self):
        """–í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –ø–∞—É–∑—É –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è."""
        if not self.worker.isRunning():
            QMessageBox.information(self, "–ü–∞—É–∑–∞", "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–ª—è –ø–∞—É–∑—ã")
            return
        self.worker.pause_toggle()

    def on_worker_pause_changed(self, paused: bool):
        """–û–±–Ω–æ–≤–∏—Ç—å UI –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–∞—É–∑—ã."""
        self.btn_pause.setText("‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å" if paused else "‚è∏ –ü–∞—É–∑–∞")
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ UI –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–∞—É–∑—ã
        self.save_settings()
    
    def load_settings(self):
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ JSON —Ñ–∞–π–ª–∞."""
        settings_path = Path("files")/"xpoker_settings.json"
        if not settings_path.exists():
            self.log.appendPlainText(f"{Icons.INFO} –§–∞–π–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
            return
        
        try:
            # –ï—Å–ª–∏ —Ñ–∞–π–ª –ø—É—Å—Ç–æ–π ‚Äî —Å—Ç–∞—Ä—Ç—É–µ–º —Å –¥–µ—Ñ–æ–ª—Ç–æ–≤
            if settings_path.stat().st_size == 0:
                raise ValueError("empty settings file")
            with open(settings_path, 'r', encoding='utf-8') as f:
                settings = json.load(f)
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã
            self.accounts.clear()
            self.tbl.setRowCount(0)
            for acc_data in settings.get('accounts', []):
                acc = Account(
                    username=acc_data.get('username', ''),
                    password=acc_data.get('password', ''),
                    device_id=acc_data.get('device_id') or "",
                    proxy=acc_data.get('proxy'),
                )
                # –¢–æ–∫–µ–Ω—ã –∏ –∏—Ö —Å—Ä–æ–∫–∏
                acc.refresh_token = acc_data.get('refresh_token')
                acc.access_token_expire = acc_data.get('access_token_expire')
                acc.refresh_token_expire = acc_data.get('refresh_token_expire')
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º device_id –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
                if not acc.device_id:
                    import uuid
                    acc.device_id = str(uuid.uuid4())
                self.accounts.append(acc)
                self._append_account_row(acc)
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–ª—É–±—ã
            self.club_ids = settings.get('club_ids', [])
            # –ù–µ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫
            # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ –±—É–¥–µ—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è
            self.update_clubs_count()
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ UI
            ui_settings = settings.get('settings', {})
            self.spn_clubs_per_account.setValue(ui_settings.get('clubs_per_account', 500))
            self.spn_delay_min.setValue(ui_settings.get('delay_min_ms', 500))
            self.spn_delay_max.setValue(ui_settings.get('delay_max_ms', 1500))
            self.chk_shuffle.setChecked(ui_settings.get('shuffle_clubs', True))
            # –°–æ–æ–±—â–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏
            self.txt_message.setText(ui_settings.get('apply_message', ''))
            # –¢–µ–º–∞ (—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—ã–±–æ—Ä –∏ –ø—Ä–∏–º–µ–Ω–∏—Ç—å)
            theme_mode = ui_settings.get('theme', 'system')
            # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—ã–±–æ—Ä –≤ –∫–æ–º–±–æ–±–æ–∫—Å–µ
            try:
                idx = next(i for i in range(self.cmb_theme.count()) if self.cmb_theme.itemData(i) == theme_mode)
            except StopIteration:
                idx = 0
            self.cmb_theme.setCurrentIndex(idx)
            self.apply_theme(theme_mode)
            
            self.worker.accounts = self.accounts
            self.log.appendPlainText(f"{Icons.SUCCESS} –ó–∞–≥—Ä—É–∂–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {len(self.accounts)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤, {len(self.club_ids)} –∫–ª—É–±–æ–≤")
            
        except Exception as e:
            # –ü—Ä–∏ –æ—à–∏–±–∫–µ —Ä–∞–∑–±–æ—Ä–∞ ‚Äî –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º —Ñ–∞–π–ª –≤ —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –∏ —Å—Ç–∞—Ä—Ç—É–µ–º —Å –¥–µ—Ñ–æ–ª—Ç–æ–≤
            try:
                backup = settings_path.with_suffix('.bak')
                settings_path.replace(backup)
                self.log.appendPlainText(f"{Icons.WARNING} –§–∞–π–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–≤—Ä–µ–∂–¥—ë–Ω, —Å–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup}")
            except Exception:
                pass
            self.accounts.clear()
            self.tbl.setRowCount(0)
            self.club_ids = []
            self.update_clubs_count()
            self.log.appendPlainText(f"{Icons.ERROR} –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}. –ó–∞–≥—Ä—É–∂–µ–Ω—ã –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
    
    def on_stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –∑–∞–¥–∞—á–∏."""
        if self.worker.isRunning():
            self.worker.stop()
            self.log.appendPlainText(f"{Icons.WARNING} üõë –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω...")
        else:
            QMessageBox.information(self, "–û—Å—Ç–∞–Ω–æ–≤–∫–∞", "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    
    def on_worker_started(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—É—Å–∫–∞ worker'–∞ - –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –æ—Å—Ç–∞–Ω–æ–≤–∫–∏."""
        self.btn_stop.setEnabled(True)
        self.btn_pause.setEnabled(True)
        self.btn_pause.setText("‚è∏ –ü–∞—É–∑–∞")
        # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        self.btn_join.setEnabled(False)
        self.btn_login.setEnabled(False)
        self.btn_logout.setEnabled(False)
    
    def on_worker_finished(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è worker'–∞ - –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –æ—Å—Ç–∞–Ω–æ–≤–∫–∏."""
        self.btn_stop.setEnabled(False)
        self.btn_pause.setEnabled(False)
        self.btn_pause.setText("‚è∏ –ü–∞—É–∑–∞")
        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ –∫–Ω–æ–ø–∫–∏ –æ–ø–µ—Ä–∞—Ü–∏–π
        self.btn_join.setEnabled(True)
        self.btn_login.setEnabled(True)
        self.btn_logout.setEnabled(True)
    
    def on_task_finished(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏."""
        self.worker._stop = False
        self.worker._pause = False
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –æ—Ç–º–µ–Ω—ã –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
        try:
            self.worker._cancel_event.clear()
        except Exception:
            pass
        # –û—á–∏—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –∫–ª—É–±–µ
        self.worker._last_club_info = {
            'club_id': None,
            'username': None,
            'success': None,
            'message': None
        }

    def closeEvent(self, event):
        try:
            self.save_settings()
        except Exception as e:
            self.log.appendPlainText(f"{Icons.ERROR} –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ: {e}")
        super().closeEvent(event)


    # ===== –¢–µ–º–∞ (—Å–≤–µ—Ç–ª–∞—è/—Ç—ë–º–Ω–∞—è/—Å–∏—Å—Ç–µ–º–Ω–∞—è) =====
    def detect_system_theme(self) -> str:
        try:
            if platform.system().lower() == 'windows' and winreg is not None:
                with winreg.OpenKey(winreg.HKEY_CURRENT_USER, r"Software\Microsoft\Windows\CurrentVersion\Themes\Personalize") as k:
                    v, _ = winreg.QueryValueEx(k, 'AppsUseLightTheme')
                    return 'light' if int(v) == 1 else 'dark'
        except Exception:
            pass
        return 'light'

    def apply_theme(self, pref_mode: str) -> None:
        pref_mode = (pref_mode or 'system').lower()
        self.theme_pref = pref_mode
        eff = pref_mode if pref_mode in ('light','dark') else self.detect_system_theme()
        self.current_theme_mode = 'dark' if eff == 'dark' else 'light'
        app = QApplication.instance()
        # –ï—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω qdarktheme/pyqtdarktheme ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ (light/dark/auto)
        if _qdt_mod is not None and _qdt_api is not None:
            try:
                if _qdt_api == 'setup_theme':
                    mode = 'auto' if self.theme_pref == 'system' else self.current_theme_mode
                    _qdt_mod.setup_theme(mode)  # type: ignore[attr-defined]
                elif _qdt_api == 'load_stylesheet':
                    # load_stylesheet(theme='dark'|'light') API
                    theme = 'auto' if self.theme_pref == 'system' else self.current_theme_mode
                    # auto: –ø–æ–¥—Å—Ç—Ä–∞–∏–≤–∞–µ–º—Å—è –ø–æ–¥ —Å–∏—Å—Ç–µ–º—É ‚Äî –≤—ã–±–µ—Ä–µ–º light/dark
                    if theme == 'auto':
                        theme = self.detect_system_theme()
                    css = _qdt_mod.load_stylesheet(theme)  # type: ignore[attr-defined]
                    app.setStyle('Fusion'); app.setStyleSheet(css)
            except Exception:
                try:
                    app.setStyle('Fusion'); app.setStyleSheet("")
                except Exception:
                    pass
        else:
            # Fallback: Fusion
            try:
                app.setStyle('Fusion'); app.setStyleSheet("")
            except Exception:
                pass
        # –ü—Ä–∏–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∞–±–ª–∏—Ü (—Ñ–æ–Ω/–ª–µ–≤—ã–π —Å–ª—É–∂–µ–±–Ω—ã–π —Å—Ç–æ–ª–±–µ—Ü)
        self.update_table_theme()
        # –û–±–Ω–æ–≤–∏—Ç—å –≤—ã–±–æ—Ä –≤ –∫–æ–º–±–æ–±–æ–∫—Å–µ (–µ—Å–ª–∏ –º–µ–Ω—è–ª–∏ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ)
        try:
            idx = next(i for i in range(self.cmb_theme.count()) if self.cmb_theme.itemData(i) == self.theme_pref)
            if self.cmb_theme.currentIndex() != idx:
                self.cmb_theme.blockSignals(True)
                self.cmb_theme.setCurrentIndex(idx)
                self.cmb_theme.blockSignals(False)
        except Exception:
            pass

    def update_table_theme(self) -> None:
        """–ü–µ—Ä–µ–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∏ –µ—ë –ª–µ–≤–æ–≥–æ —Å–ª—É–∂–µ–±–Ω–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞ –ø–æ–¥ —Ç–µ–∫—É—â—É—é —Ç–µ–º—É.
        –î–µ–ª–∞–µ—Ç—Å—è –ø–µ—Ä-–≤–∏–¥–∂–µ—Ç–Ω–æ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–∫—Ä—ã—Ç—å —Ç–µ–º—É qdarktheme.
        """
        try:
            t = self.tbl
        except Exception:
            return
        if not isinstance(t, QTableWidget):
            return
        if self.current_theme_mode == 'dark':
            # –ë–æ–ª–µ–µ —Ç—ë–º–Ω—ã–π —Ñ–æ–Ω —Ç–∞–±–ª–∏—Ü—ã –∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Ñ–æ–Ω–∞ –ª–µ–≤–æ–≥–æ –Ω–æ–º–µ—Ä–∞—Ç–æ—Ä–∞ —Å—Ç—Ä–æ–∫
            try:
                # –§–æ–Ω —Å–∞–º–æ–π —Ç–∞–±–ª–∏—Ü—ã –∏ –≤—å—é–ø–æ—Ä—Ç–∞
                t.setStyleSheet(
                    "QTableWidget, QTableView, QTableWidget::viewport, QTableView::viewport {"
                    " background-color: #1e1e1e;"
                    "}"
                    "QTableCornerButton::section {"
                    " background-color: #1e1e1e;"
                    "}"
                )
                t.viewport().setStyleSheet("background-color: #1e1e1e;")
            except Exception:
                pass
            # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π —Ö–µ–¥–µ—Ä (—Å—Ç–æ–ª–±–µ—Ü –Ω–æ–º–µ—Ä–æ–≤ —Å—Ç—Ä–æ–∫)
            try:
                vh = t.verticalHeader()
                if vh is not None:
                    vh.setStyleSheet(
                        "QHeaderView { background-color: #1e1e1e; }"
                        "QHeaderView::section { background-color: #1e1e1e; color: #d0d0d0; border: none; }"
                    )
                    pal = vh.palette()
                    pal.setColor(QPalette.ColorRole.Button, QColor("#1e1e1e"))
                    pal.setColor(QPalette.ColorRole.Window, QColor("#1e1e1e"))
                    pal.setColor(QPalette.ColorRole.Base, QColor("#1e1e1e"))
                    vh.setPalette(pal)
                    vh.setAutoFillBackground(True)
            except Exception:
                pass
        else:
            # –°–≤–µ—Ç–ª–∞—è/—Å–∏—Å—Ç–µ–º–Ω–∞—è —Ç–µ–º–∞ ‚Äî –∞–∫–∫—É—Ä–∞—Ç–Ω—ã–π —Å–≤–µ—Ç–ª—ã–π —Å—Ç–∏–ª—å –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
            try:
                # –°–Ω–∏–º–∞–µ–º –≤—Å–µ QSS —Å —Ç–∞–±–ª–∏—Ü—ã –∏ –≤—å—é–ø–æ—Ä—Ç–∞
                t.setStyleSheet("")
                t.viewport().setStyleSheet("")
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–∞–ª–∏—Ç—Ä—É –∫ —Å–∏—Å—Ç–µ–º–Ω–æ–π
                try:
                    pal = QApplication.palette()
                    t.setPalette(pal)
                    t.viewport().setAutoFillBackground(False)
                except Exception:
                    pass
                # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π —Ö–µ–¥–µ—Ä ‚Äî —Ç–æ–∂–µ –∫ —Å–∏—Å—Ç–µ–º–Ω–æ–π –ø–∞–ª–∏—Ç—Ä–µ
                vh = t.verticalHeader()
                if vh is not None:
                    vh.setStyleSheet("")
                    vh.setAutoFillBackground(False)
                    try:
                        vh.setPalette(QApplication.palette())
                    except Exception:
                        pass
                # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π —Ö–µ–¥–µ—Ä ‚Äî —Å–±—Ä–æ—Å
                hh = t.horizontalHeader()
                if hh is not None:
                    hh.setStyleSheet("")
                    try:
                        hh.setPalette(QApplication.palette())
                    except Exception:
                        pass
                # –õ—ë–≥–∫–∞—è —Å–≤–µ—Ç–ª–∞—è —Å—Ç–∏–ª–∏–∑–∞—Ü–∏—è (–ø–µ—Ä-–≤–∏–¥–∂–µ—Ç–Ω–∞—è)
                ss_light = (
                    "QTableWidget#accountsTable, QTableWidget#accountsTable::viewport {"
                    " background-color: #f7f7f7;"
                    " alternate-background-color: #ffffff;"
                    "}"
                    "QTableWidget#accountsTable {"
                    " gridline-color: #e0e0e0;"
                    "}"
                    "QTableWidget#accountsTable QHeaderView::section:horizontal {"
                    " background-color: #fafafa; color: #222; border: 1px solid #e6e6e6; padding: 4px;"
                    "}"
                    "QTableWidget#accountsTable QHeaderView::section:vertical {"
                    " background-color: #f7f7f7; color: #666; border: none;"
                    "}"
                    "QTableCornerButton::section {"
                    " background-color: #fafafa; border: 1px solid #e6e6e6;"
                    "}"
                    "QTableWidget#accountsTable::item:selected {"
                    " background-color: #cfe8ff; color: #000;"
                    "}"
                )
                try:
                    t.setAlternatingRowColors(True)
                except Exception:
                    pass
                try:
                    t.setStyleSheet(ss_light)
                except Exception:
                    pass
                # –ü–µ—Ä–µ–ø–æ–ª–∏—Ä—É–µ–º –≤–∏–¥–∂–µ—Ç, —á—Ç–æ–±—ã –ø—Ä–∏–º–µ–Ω–∏—Ç—å —Ç–µ–º—É
                try:
                    t.style().unpolish(t)
                    t.style().polish(t)
                    t.update()
                except Exception:
                    pass
            except Exception:
                pass

    def on_theme_combo_changed(self, index: int):
        try:
            pref = self.cmb_theme.itemData(index) or 'system'
        except Exception:
            pref = 'system'
        self.apply_theme(pref)
        self.save_settings()


def _configure_console():
    try:
        if os.name != 'nt':
            return
        import ctypes
        SW_HIDE, SW_SHOW = 0, 5
        GetConsoleWindow = ctypes.windll.kernel32.GetConsoleWindow
        ShowWindow = ctypes.windll.user32.ShowWindow
        hwnd = GetConsoleWindow()
        want_console = any(a in ('--console', '-c', '/c') for a in sys.argv[1:])
        if want_console:
            if hwnd:
                ShowWindow(hwnd, SW_SHOW)
            else:
                try:
                    ctypes.windll.kernel32.AllocConsole()
                except Exception:
                    pass
        else:
            if hwnd:
                ShowWindow(hwnd, SW_HIDE)
    except Exception:
        pass


def main():
    """–°—Ç–∞—Ä—Ç GUI —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π —Å—Ç–∞—Ä—Ç–æ–≤—ã—Ö –æ—à–∏–±–æ–∫."""
    try:
        # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏ –ø—Ä–æ–±–ª–µ–º —Å Qt-–ø–ª–∞–≥–∏–Ω–∞–º–∏ —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ:
        # os.environ.setdefault("QT_DEBUG_PLUGINS", "1")
        # Ensure files/logs directories exist
        try:
            Path('files').mkdir(parents=True, exist_ok=True)
            Path('logs').mkdir(parents=True, exist_ok=True)
        except Exception:
            pass
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(levelname)s - [%(name)s] - %(message)s',
            handlers=[
                RotatingFileHandler(str(Path('logs')/'xpoker_gui.log'), maxBytes=2*1024*1024, backupCount=5, encoding='utf-8'),
                logging.StreamHandler()
            ]
        )
        logging.getLogger(__name__).info("Starting ClubSender GUI...")
        # Console: hidden by default; use --console to show
        _configure_console()
        app = QApplication(sys.argv)
        w = MainWindow()
        w.show()
        sys.exit(app.exec())
    except Exception as e:
        tb = traceback.format_exc()
        try:
            Path('logs').mkdir(parents=True, exist_ok=True)
            with open(Path('logs')/"startup_error.log", 'w', encoding='utf-8') as f:
                f.write(tb)
        except Exception:
            pass
        print("[StartupError]", e, file=sys.stderr)
        print(tb, file=sys.stderr)

if __name__ == "__main__":
    main()

